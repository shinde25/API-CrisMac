using System.Web.Http;
using CrisMAc.Models.Utility;
using System.Web.Script.Serialization;
using System.Net.Http;
using System.Net;
using CrisMAcAPI.Models.Repository.StockStatementRepository;

namespace CrisMAcAPI.Controllers
{
    public class StockStatementController : ApiController
    {
       IStockStatementRepository repository;
        UtilityWeb objutility = new UtilityWeb();      
        public StockStatementController(IStockStatementRepository repository)
        {
            this.repository = repository;
        }

        [Route("CrisMAc/StockDetails/{param}")]
        [HttpGet]
        public string GetDetails(string param)
        {
            param = objutility.DecryptString(param);
            var objAuxDetail = repository.GetAuxdata(param);
            
            var json = new JavaScriptSerializer().Serialize(objAuxDetail);
            return objutility.EnryptString(json);
        }

        [Route("CrisMAc/StockDetails/")]
        [HttpPost]
        public HttpResponseMessage AddStockStatement()
        {
            string _data = Request.Content.ReadAsStringAsync().Result;
            var _mainData = objutility.DecryptString(_data);
            int result = repository.InsertUpdateData(_mainData);

            HttpResponseMessage response = Request.CreateResponse(HttpStatusCode.Created);
            response.Headers.Add("result", result.ToString());

            return response;
        }

        [Route("CrisMAc/GetStockStatementMetaData/")]
        [HttpGet]
        public string GetMetaDataStockStatement()
        {
            var objAuxDetail = repository.GetMetaData();
            var json = new JavaScriptSerializer().Serialize(objAuxDetail);
            return objutility.EnryptString(json);
        }

        [Route("CrisMAc/GetStockStatementData/{param}")]
        [HttpGet]
        public string GetStockStatementData(string param)
        {
            param = objutility.DecryptString(param);
            var objFetchDetails = repository.FetchData(param);
            var json = new JavaScriptSerializer().Serialize(objFetchDetails);
            return objutility.EnryptString(json);
        }

        [Route("test/demo/")]
        [HttpPost]
        public HttpResponseMessage Test()
        {
            HttpResponseMessage response = Request.CreateResponse(HttpStatusCode.Created);
            response.Headers.Add("result", "test");

            return response;

        }
    }
}
